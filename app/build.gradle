apply plugin: 'com.android.application'
apply plugin: 'com.novoda.android-command'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'
apply plugin: 'net.ltgt.errorprone'

def signingFile = file('props/release.signing')
buildProperties {
  signing.file signingFile.exists() ? signingFile : file('props/debug.signing')
  secrets.file file('props/secrets.properties')
}

def secrets = buildProperties.secrets
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
  compileSdkVersion versions.compileSdk

  defaultConfig {
    applicationId 'com.tasomaniac.seriesguide.plex'
    minSdkVersion versions.minSdk
    targetSdkVersion versions.compileSdk
    versionCode versions.versionCode
    versionName versions.versionName
    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""

    resConfigs "en"

    javaCompileOptions.annotationProcessorOptions {
      arguments['butterknife.minSdk'] = minSdkVersion.apiString
      arguments['butterknife.debuggable'] = 'false'
    }
  }

  signingConfigs {
    debug.storeFile file('props/debug.keystore')
    release.signingConfigProperties buildProperties.signing
  }

  buildTypes {
    debug {
      ext.enableCrashlytics = false
      applicationIdSuffix '.debug'
      versionNameSuffix '-debug'
      signingConfig signingConfigs.debug
    }

    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    textReport true
    textOutput 'stdout'

    lintConfig file('props/lint.xml')
    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
    checkReleaseBuilds false
  }
}

play {
  serviceAccountEmail = secrets['play_service_account'].or('').string
  pk12File = file(secrets['play_key_file'].or('no_file.p12').string)
  track = 'alpha'
}

configurations {
  implementation.exclude module: 'support-v4'
  compile.exclude module: 'support-v4'
}

dependencies {

  implementation "com.android.support:support-v4:$versions.supportLib"
  implementation "com.android.support:appcompat-v7:$versions.supportLib"
  implementation "com.android.support:preference-v14:$versions.supportLib"
  implementation "com.android.support:design:$versions.supportLib"
  implementation 'com.tasomaniac:integrationpreference-support:0.2'
  implementation 'com.jakewharton.timber:timber:4.6.0'
  implementation "com.google.dagger:dagger-android-support:$versions.dagger"
  annotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"
  annotationProcessor "com.google.dagger:dagger-android-processor:$versions.dagger"
  implementation 'com.uwetrottmann.seriesguide:seriesguide-api:1.3.0'
  implementation('com.crashlytics.sdk.android:crashlytics:2.+') {
    transitive = true
  }

  testImplementation 'junit:junit:4.12'
}
